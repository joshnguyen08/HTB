Loggy

Janice from accounting is beside herself! She was contacted by the SOC to tell her that her work credentials were found on the dark web by the threat intel team. We managed to recover some files from her machine and sent them to the our REM analyst.

Artifacts given:
Danger.txt
keylog.txt
4 screenshots 
danger.zip which contained loggy.exe



What is the SHA-256 hash of this malware binary?

┌──(kali㉿kali)-[~/Downloads]
└─$ sha256sum Loggy.exe 
6acd8a362def62034cbd011e6632ba5120196e2011c83dc6045fcb28b590457c  Loggy.exe

└─$ file Loggy.exe 
Loggy.exe: PE32+ executable (console) x86-64, for MS Windows, 15 sections




What programming language (and version) is this malware written in?


└─$ strings Loggy.exe | grep -i "go1\."

go1.22.3
C:/Program Files/Go/src/vendor/golang.org/x/crypto/internal/poly1305/bits_go1.13.go
go1.22.3


strings Loggy.exe | grep -i "GitHub.com"

github.com/jlaffaye/ftp


What dependency, expressed as a GitHub repo, supports Janice’s assertion that she thought she downloaded something that can just take screenshots?

strings Loggy.exe | grep -i "screenshot"

We can see a lot of GitHub.com/kbinani/screenshot



Task 5: Which function call suggests that the malware produces a file after execution?

┌──(kali㉿kali)-[~/Downloads]
└─$ strings Loggy.exe | grep -i "WriteFile" 

WRITEFILE


6. You observe that the malware is exfiltrating data over FTP. What is the domain it is exfiltrating data to?

Approach:

Identify the binary as a Golang binary.

Install the GoReSym plugin for Binary Ninja to better analyze Golang binaries.

Generate the necessary .json file using the command:
GoReSym.exe -t -d -p Loggy.exe > Loggy.json

Load the binary into Binary Ninja, apply the GoReSym Info, and locate the main.SendFilesViaFTP function. Identify the FTP domain used for exfiltration.


┌──(kali㉿kali)-[~/Downloads]
└─$ strings Loggy.exe | grep -i "\.htb"  

        sched={pc:, gp->status= pluginpath= runtime: pid=: unknown pc  called from dalTLDpSugct?GetTempPath2Wlevel 3 resetsrmount errortimer expiredexchange fullCertOpenStoreFindNextFileWMapViewOfFileVirtualUnlockWriteConsoleWFreeAddrInfoWgethostbynamegetservbynameRegDeleteKeyWRegEnumValueWtlsmaxrsasizeaccess denieduser canceledPKCS1WithSHA1ECDSAWithSHA1CLIENT_RANDOMlame referralCreateRectRgnCreateActCtxWCoTaskMemFreeOleInitializePdhCloseQueryAnimateWindowDrawFocusRectGetMenuItemIDGetScrollInfoGetSystemMenuSetScrollInfoGetThemeColorOpenThemeDataEnumPrintersWgocacheverifyinstallgoroothtml/templateinvalid ASN.1SHA256-RSAPSSSHA384-RSAPSSSHA512-RSAPSSemail addressname too longDeleteServiceGetDriveTypeWThread32FirstRtlGetVersionRtlInitStringExitWindowsExWTSFreeMemoryempty integerunsupported:  in host namegotthem.htb:21not a PNG fileComputerNameEx: extra text: ControlServiceOpenSCManagerWRegSetValueExWCreateProcessWDwmEnableMMCSSDwmShowContactGetStockObjectGetPixelFormatSetPixelFormatGdiplusStartupSizeofResourceModule32FirstWGetSystemTimesVirtualAllocExCoInitializeExCoUninitializeSysAllocStringwglMakeCurrentDragQueryFileWDragQueryPointDefWindowProcWSetWindowTextWGetWindowTextWScreenToClientSetWindowLongWGetWindowLongWInvalidateRectReleaseCaptureClientToScreenCloseClipboardEmptyClipboardCallNextHookExinvalid syntax1907348632812595367431640625unexpected EOFunsafe.Pointer on zero Valueunknown methoduserArenaStateread mem statsallocfreetracegcstoptheworldGC assist waitfinalizer waitsync.Cond.Waits.allocCount= nil elem type! to finalizer GC worker initruntime: full=runtime: want=MB; allocated timeEndPeriod
                            
gotthem.htb


What are the threat actor’s credentials?


Solution: Within the main.SendFilesViaFTP function, observe text data being loaded into registers. Extract the username and password.

I got it
NottaHacker:Cle@rtextP@ssword0123456789ABCDEFX , however not sure hwo to format

The file being written to disk is keylog.txt.

Janice is also keylogged, it logged her username Janice:Password123

Along with solitaire being her last opened app when she screenshotted.


